# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Detect the OS we are running on, and adjust commands as needed
ifeq ($(OSTYPE),cygwin)
	CLEANUP = rm -f
	MKDIR = mkdir -p
	TARGET_EXTENSION=.out
else ifeq ($(OS),Windows_NT)
	CLEANUP = del /F /Q
	MKDIR = mkdir
	TARGET_EXTENSION=.exe
else
	CLEANUP = rm -f
	MKDIR = mkdir -p
	TARGET_EXTENSION=.out
endif

# Helper to allow debuging of variables Eg. make print-EXT
print-%  : ; @echo $* = $($*)

# File Extension of code
EXT = cc

# Directory Definitions
DIR_GTEST = vendor/google/googletest/
# Where to find user code.
DIR_SRC = src/
# Directory where objects will be stored
DIR_BUILD = build/
# Directory where unit tests are stored
DIR_TEST = test/


# Determine our source files
SRC_GTEST = $(DIR_GTEST)src/gtest-all.cc $(DIR_GTEST)src/gtest_main.cc 
SRC_APP = $(wildcard $(DIR_SRC)*.$(EXT))
SRC_TEST = $(wildcard $(DIR_TEST)*.$(EXT))
SRC_ALL = $(SRC_GTEST) $(SRC_APP) $(SRC_TEST)




# Object files
OBJ_GTEST = $(patsubst %.c,$(DIR_BUILD)%.o,$(SRC_GTEST))
OBJ_SRC = $(patsubst %.c,$(DIR_BUILD)%.o,$(SRC_APP))
OBJ_TEST = $(patsubst %.c,$(DIR_BUILD)%.o,$(SRC_TEST))
OBJECTS = $(OBJ_GTEST) $(OBJ_SRC) $(OBJ_TEST)

#$(info VAR="$(SRC_GTEST)")
#$(info VAR="$(OBJ_GTEST)")
# $(info VAR="$(OBJ_SRC)")
#$(info VAR="$(OBJ_TEST)")
$(info VAR="$(OBJECTS)")


TARGET = $(DIR_BUILD)/test$(TARGET_EXTENSION)

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(DIR_GTEST)include  -I$(DIR_GTEST)  -I$(DIR_SRC)

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TGT = $(PATHB)test$(TARGET_EXTENSION)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_DEP = $(DIR_GTEST)include/gtest/*.h \
            $(DIR_GTEST)include/gtest/internal/*.h \
            $(DIR_GTEST)src/*.h

# Builds gtest.a and gtest_main.a.


# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
# gtest-all.o : $(GTEST_SRCS_)
# 	$(CXX) $(CPPFLAGS) -I$(DIR_GTEST) $(CXXFLAGS) -c \
#             $(DIR_GTEST)/src/gtest-all.cc

# gtest_main.o : $(GTEST_SRCS_)
# 	$(CXX) $(CPPFLAGS) -I$(DIR_GTEST) $(CXXFLAGS) -c \
#             $(DIR_GTEST)/src/gtest_main.cc


            
# House-keeping build targets.
.DEFAULT_GOAL := test

.PHONY : test
test:  $(DIR_BUILD) $(TGT)


$(DIR_BUILD)%.o::  $(DIR_SRC)%.c $(GTEST_DEP) 
	$(CXX) $(CPPFLAGS) -c $(CXXFLAGS) $< -o $@


$(DIR_BUILD)%.o::  $(DIR_TEST)%.c $(GTEST_DEP) 
	$(CXX) $(CPPFLAGS) -c $(CXXFLAGS) $< -o $@

$(DIR_BUILD)%.o::  $(DIR_GTEST)src/%.c $(GTEST_DEP) 
	$(CXX) $(CPPFLAGS) -c $(CXXFLAGS) $< -o $@


$(TGT) : $(OBJECTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@


# Builds deployable executable

.PHONY : clean
clean :
	$(CLEANUP) $(TESTS) gtest.a gtest_main.a *.o


.PHONY: all
all: clean test



# gtest-all.a : gtest-all.o
# 	$(AR) $(ARFLAGS) $@ $^

# gtest_main.a : gtest-all.a gtest_main.o
# 	$(AR) $(ARFLAGS) $@ $^


# # Builds a sample test.  A test should link with either gtest.a or
# # gtest_main.a, depending on whether it defines its own main()
# # function.

# sample1.o : $(DIR_SRC)/sample1.cc $(DIR_SRC)/sample1.h $(GTEST_DEP)
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(DIR_SRC)/sample1.cc

# sample1_unittest.o : $(DIR_SRC)/sample1_unittest.cc \
#                      $(DIR_SRC)/sample1.h $(GTEST_DEP)
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(DIR_SRC)/sample1_unittest.cc

# sample1_unittest : sample1.o sample1_unittest.o gtest_main.a
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
